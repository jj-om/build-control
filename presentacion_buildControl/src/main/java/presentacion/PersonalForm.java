/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion;

import com.github.lgooddatepicker.components.TimePicker;
import dto.AsistenciaPersonalDTO;
import dto.ObraDTO;
import exception.PresentacionException;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import utilities.Utilities;

/**
 * Clase PersonalForm
 *
 * Formulario de la capa de presentación para el registro de asistencia del
 * personal en el sistema.
 * 
 * @author Alejandra García 252444
 * @author Isabel Valenzuela 253301
 * @author Ximena Rosales 253088
 * @author Dario Cortez 252267
 * @author Jesús Osuna 240549
 */
public class PersonalForm extends JFrame {
    
    /**
     * Panel donde se agregarán dinámicamente los componentes para cada
     * trabajador. Contiene los elementos de interfaz para cada empleado
     * (checkbox, horas, notas).
     */
    private JPanel panelContenedor;

    /**
     * Panel con barra de desplazamiento para permitir visualizar todos los
     * trabajadores. Facilita la navegación cuando hay muchos empleados en la
     * lista.
     */
    private JScrollPane scrollPanel;

    /**
     * Lista de nombres de trabajadores disponibles para registrar asistencia.
     * Obtenida del coordinador de negocio.
     */
    private List<String> trabajadores;

    /**
     * Referencia al coordinador de aplicación. Permite la navegación entre los
     * distintos formularios del sistema.
     */
    private CoordinadorAplicacion coordinador;

    /**
     * Referencia al coordinador de negocio. Proporciona acceso a la lógica de
     * negocio para el registro de asistencia.
     */
    private CoordinadorNegocio coordinadorNegocio;

    /**
     * Logger para registro de eventos y errores en la clase.
     */
    private static final Logger logger = Logger.getLogger(PersonalForm.class.getName());
    
    /**
     * Constructor del formulario de personal.
     *
     * Inicializa los componentes gráficos, configura la apariencia y establece
     * la conexión con los coordinadores de la aplicación. También carga la
     * lista de trabajadores y construye dinámicamente la interfaz para el
     * registro de asistencia.
     *
     * @param coordinador Referencia al coordinador de aplicación
     */
    public PersonalForm(CoordinadorAplicacion coordinador) {
        initComponents();
        getContentPane().setBackground(Color.WHITE);
        this.setLocationRelativeTo(null);
        this.coordinador = coordinador;
        this.coordinadorNegocio = CoordinadorNegocio.getInstance();
        ObraDTO obra = this.coordinadorNegocio.obtenerObraSeleccionada();
        campoNombreObra.setText(obra.getDireccion());
        
        // Inicializar lista de trabajadores
        trabajadores = coordinadorNegocio.obtenerPersonal();
        crearPanelAsistencia();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        timePicker4 = new com.github.lgooddatepicker.components.TimePicker();
        timePicker5 = new com.github.lgooddatepicker.components.TimePicker();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        btnAtras = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        panelPrincipal = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        nombreEmpresa = new javax.swing.JLabel();
        registrarAsistencia = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtFiltroPersonal = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        campoNombreObra = new javax.swing.JTextField();

        jLabel4.setText("Entrada");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Salida");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Notas");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btnAtras.setText("Atrás");
        btnAtras.setBackground(new java.awt.Color(95, 168, 211));
        btnAtras.setBorderPainted(false);
        btnAtras.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAtras.setForeground(new java.awt.Color(255, 255, 255));
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnSiguiente.setText("Registrar bitácora");
        btnSiguiente.setBackground(new java.awt.Color(95, 168, 211));
        btnSiguiente.setBorderPainted(false);
        btnSiguiente.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSiguiente.setForeground(new java.awt.Color(255, 255, 255));
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        panelPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        panelPrincipal.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        nombreEmpresa.setText("BuildControl");
        nombreEmpresa.setFont(new java.awt.Font("Segoe UI", 0, 32)); // NOI18N

        registrarAsistencia.setText("Registrar asistencia");
        registrarAsistencia.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrarAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreEmpresa))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nombreEmpresa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registrarAsistencia)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        txtFiltroPersonal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtFiltroPersonal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroPersonalKeyReleased(evt);
            }
        });

        jLabel7.setText("Filtrar por nombre de personal:");
        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        campoNombreObra.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        campoNombreObra.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        campoNombreObra.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoNombreObra, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtFiltroPersonal, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(campoNombreObra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFiltroPersonal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPrincipal.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 514, Short.MAX_VALUE)
                .addComponent(btnSiguiente)
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Maneja el evento de clic en el botón "Atrás". Regresa al formulario
     * anterior del flujo de trabajo.
     *
     * @param evt Evento de acción que desencadenó este método
     */
    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        atras();
    }//GEN-LAST:event_btnAtrasActionPerformed

    /**
     * Maneja el evento de clic en el botón "Registrar bitácora". Registra la
     * asistencia y finaliza el proceso completo de creación de bitácora.
     *
     * @param evt Evento de acción que desencadenó este método
     */
    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        siguiente();
    }//GEN-LAST:event_btnSiguienteActionPerformed

    /**
     * Maneja el evento de liberación de tecla en el campo de filtro de
     * personal. Filtra la lista de trabajadores según el texto ingresado.
     *
     * @param evt Evento de teclado que desencadenó este método
     */
    private void txtFiltroPersonalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroPersonalKeyReleased
        filtrarPersonal();
    }//GEN-LAST:event_txtFiltroPersonalKeyReleased

    /**
     * Crea y configura el panel principal de asistencia con todos los
     * trabajadores.
     *
     * Inicializa el panel contenedor con un BoxLayout vertical, agrega los
     * paneles individuales para cada trabajador y lo incorpora en un
     * JScrollPane para permitir el desplazamiento cuando hay muchos empleados.
     */
    private void crearPanelAsistencia() {
        // Crear el panel contenedor con BoxLayout (apilado vertical)
        panelContenedor = new JPanel();
        panelContenedor.setLayout(new BoxLayout(panelContenedor, BoxLayout.Y_AXIS));
        panelContenedor.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Margen
        panelContenedor.setPreferredSize(new Dimension(750, trabajadores.size() * 60)); // Tamaño para el scroll
        panelContenedor.setBackground(Color.WHITE);

        // Llenar el panel con los trabajadores
        agregarPanelesPersonal();

        // Agregar el panel a un JScrollPane
        scrollPanel = new JScrollPane(panelContenedor);
        scrollPanel.setBackground(Color.WHITE);
        scrollPanel.setBorder(null);
        scrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); // Solo mostrar cuando sea necesario
        scrollPanel.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); // Deshabilitar scroll horizontal
        scrollPanel.getVerticalScrollBar().setUnitIncrement(16); // Suavizar el scroll

        // Agregar el JScrollPane al JFrame
        setLayout(new BorderLayout());
        panelPrincipal.add(scrollPanel, BorderLayout.CENTER);

        setVisible(true);
    }

    // Método principal para agregar los paneles de cada trabajador
    /**
     * Crea y agrega un panel individual para cada trabajador en la lista.
     *
     * Para cada trabajador, genera un panel con sus controles correspondientes
     * (checkbox, selectores de hora, campo de notas) y lo agrega al panel
     * contenedor.
     */
    private void agregarPanelesPersonal() {
        Font fuentePanelTrabajador = new Font("Segoe UI", Font.PLAIN, 14);

        for (String trabajador : trabajadores) {
            JPanel panelTrabajador = crearPanelPorPersonal(trabajador);
            Utilities.cambiarFuente(panelTrabajador, fuentePanelTrabajador);
            panelContenedor.add(panelTrabajador);
            panelContenedor.add(Box.createVerticalStrut(10)); // Espacio entre paneles
        }

        actualizarInterfaz();
    }

    /**
     * Crea un panel personalizado para un trabajador específico.
     *
     * Construye un panel con GridBagLayout que incluye un checkbox con el
     * nombre del trabajador, selectores de hora para entrada y salida, y un
     * campo de texto para notas. Los componentes se ocultan inicialmente y se
     * muestran solo cuando se selecciona el checkbox.
     *
     * @param trabajador Nombre del trabajador para el cual se crea el panel
     * @return Panel configurado con todos los componentes necesarios
     */
    private JPanel crearPanelPorPersonal(String trabajador) {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(Color.WHITE);
        panel.setPreferredSize(new Dimension(750, 60)); // Tamaño uniforme para el panel del trabajador

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10); // Espaciado alrededor de los componentes (top, left, bottom, right)

        // Crear los componentes
        JCheckBox checkbox = crearCheckBox(trabajador);
        TimePicker timePickerEntrada = crearTimePicker("timePickerEntrada");
        TimePicker timePickerSalida = crearTimePicker("timePickerSalida");
        JTextPane textPaneNotas = crearTextPane("textPaneNotas");

        JLabel lbEntrada = new JLabel("Entrada:");
        JLabel lbSalida = new JLabel("Salida:");
        JLabel lbNotas = new JLabel("Notas:");

        // Para el checkbox, configuramos sin centrado, en la primera celda (columna 0)
        gbc.gridx = 0;
        panel.add(checkbox, gbc);

        // Para las etiquetas, también alineadas a la izquierda
        gbc.gridx = 1;
        panel.add(lbEntrada, gbc);

        gbc.gridx = 2;
        panel.add(timePickerEntrada, gbc);

        gbc.gridx = 3;
        panel.add(lbSalida, gbc);

        gbc.gridx = 4;
        panel.add(timePickerSalida, gbc);

        gbc.gridx = 5;
        panel.add(lbNotas, gbc);

        gbc.gridx = 6;
        panel.add(textPaneNotas, gbc);

        // Inicialmente, ocultar todos los componentes menos el checkbox
        lbEntrada.setVisible(false);
        lbSalida.setVisible(false);
        lbNotas.setVisible(false);
        timePickerEntrada.setVisible(false);
        timePickerSalida.setVisible(false);
        textPaneNotas.setVisible(false);

        // Controlar la visibilidad de los componentes según el estado del checkbox
        checkbox.addActionListener(e -> panelComponentesVisibilidad(checkbox, lbEntrada, lbSalida, lbNotas, timePickerEntrada, timePickerSalida, textPaneNotas));

        return panel;
    }

// Crear un JCheckBox con nombre
    /**
     * Crea un checkbox personalizado con un nombre específico.
     *
     * @param texto Texto a mostrar en el checkbox (nombre del trabajador)
     * @return Checkbox configurado
     */
    private JCheckBox crearCheckBox(String texto) {
        JCheckBox checkbox = new JCheckBox(texto);
        checkbox.setBackground(Color.WHITE);
        checkbox.setName("checkbox");
        return checkbox;
    }

// Crear un TimePicker con nombre
    /**
     * Crea un selector de hora (TimePicker) personalizado.
     *
     * @param nombre Nombre identificador para el componente
     * @return TimePicker configurado
     */
    private TimePicker crearTimePicker(String nombre) {
        TimePicker timePicker = new TimePicker();
        timePicker.setName(nombre);
        return timePicker;
    }

    // Crear un JTextPane con nombre
    /**
     * Crea un campo de texto (JTextPane) personalizado.
     *
     * @param nombre Nombre identificador para el componente
     * @return JTextPane configurado
     */
    private JTextPane crearTextPane(String nombre) {
        JTextPane textPane = new JTextPane();
        textPane.setPreferredSize(new Dimension(150, 25));
        textPane.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        textPane.setName(nombre);

        return textPane;
    }

    // Controlar la visibilidad de los componentes según el checkbox
    /**
     * Controla la visibilidad de los componentes en función del estado del
     * checkbox.
     *
     * Cuando se selecciona el checkbox, muestra los campos para registrar hora
     * de entrada, salida y notas. Cuando se deselecciona, oculta estos campos.
     *
     * @param checkbox Checkbox que controla la visibilidad
     * @param lbEntrada Etiqueta de entrada
     * @param lbSalida Etiqueta de salida
     * @param lbNotas Etiqueta de notas
     * @param timePickerEntrada Selector de hora de entrada
     * @param timePickerSalida Selector de hora de salida
     * @param textPaneNotas Campo de notas
     */
    private void panelComponentesVisibilidad(JCheckBox checkbox, JLabel lbEntrada, JLabel lbSalida, JLabel lbNotas, TimePicker timePickerEntrada, TimePicker timePickerSalida, JTextPane textPaneNotas) {
        boolean seleccionado = checkbox.isSelected();

        lbEntrada.setVisible(seleccionado);
        lbSalida.setVisible(seleccionado);
        lbNotas.setVisible(seleccionado);
        timePickerEntrada.setVisible(seleccionado);
        timePickerSalida.setVisible(seleccionado);
        textPaneNotas.setVisible(seleccionado);

        // Actualizar la interfaz
        checkbox.getParent().revalidate();
        checkbox.getParent().repaint();
    }

    // Actualizar la interfaz después de agregar los paneles, para que no haya errores al mostrarse
    /**
     * Actualiza la interfaz gráfica después de modificar componentes. Asegura
     * que los cambios sean visibles correctamente.
     */
    private void actualizarInterfaz() {
        panelContenedor.revalidate();
        panelContenedor.repaint();
    }

    // Buscar los paneles de personal seleccionados
    /**
     * Busca los paneles de personal que tienen el checkbox seleccionado.
     *
     * @return Lista de componentes (paneles) correspondientes a los
     * trabajadores seleccionados
     */
    private List<Component> buscarPersonalSeleccionados() {
        List<Component> panelesPersonal = new ArrayList<>();

        for (Component comp : panelContenedor.getComponents()) {
            if (comp instanceof JPanel jPanel) {
                if (isCheckboxSeleccionado(jPanel)) {
                    panelesPersonal.add(comp);
                }
            }
        }
        return panelesPersonal;
    }

    // Verificar si el checkbox está seleccionado en el panel
    /**
     * Verifica si el checkbox en un panel está seleccionado.
     *
     * @param panel Panel que contiene el checkbox a verificar
     * @return true si el checkbox está seleccionado, false en caso contrario
     */
    private boolean isCheckboxSeleccionado(JPanel panel) {
        JCheckBox checkbox = obtenerCheckBoxEmpleado(panel);
        return checkbox != null && checkbox.isSelected();
    }

    // Mostrar paneles según el filtro ingresado
    /**
     * Filtra los paneles de personal según el texto ingresado en el campo de
     * búsqueda. Muestra solo los trabajadores cuyo nombre coincide con el
     * filtro.
     */
    public void filtrarPersonal() {
        String filtro = txtFiltroPersonal.getText().trim().toLowerCase(); // Obtener texto de búsqueda

        for (Component componente : panelContenedor.getComponents()) {
            if (componente instanceof JPanel panel) {
                JCheckBox checkBoxEmpleado = obtenerCheckBoxEmpleado(panel);

                if (checkBoxEmpleado != null) {
                    String nombreEmpleado = checkBoxEmpleado.getText().toLowerCase();
                    panel.setVisible(nombreEmpleado.contains(filtro));
                }
            }
        }
    }

    // Obtener el JCheckBox del panel
    /**
     * Obtiene el checkbox dentro de un panel de trabajador.
     *
     * @param panel Panel que contiene el checkbox a obtener
     * @return El objeto JCheckBox encontrado, o null si no existe
     */
    private JCheckBox obtenerCheckBoxEmpleado(JPanel panel) {
        for (Component comp : panel.getComponents()) {
            if (comp instanceof JCheckBox jCheckBox) {
                return jCheckBox;
            }
        }
        return null;
    }

    // Registrar la asistencia de los empleados seleccionados
    /**
     * Registra la asistencia de los empleados seleccionados.
     *
     * Recorre los paneles de los trabajadores seleccionados, extrae la
     * información de horas y notas, y crea los DTOs correspondientes para cada
     * uno. También valida que las horas sean coherentes.
     *
     * @return Lista de AsistenciaPersonalDTO con los registros de asistencia
     * @throws PresentacionException Si hay errores en los datos ingresados
     */
    private List<AsistenciaPersonalDTO> registrarAsistenciaPorPersonal() throws PresentacionException {
        List<Component> panelesPersonalSeleccionados = buscarPersonalSeleccionados();
        List<AsistenciaPersonalDTO> listaAsistenciaPersonal = new ArrayList<>();

        for (Component panel : panelesPersonalSeleccionados) {
            if (!(panel instanceof JPanel panelEmpleado)) {
                continue;
            }

            String nombre = null;
            LocalTime horaEntrada = null;
            LocalTime horaSalida = null;
            String notas = null;

            for (Component comp : panelEmpleado.getComponents()) {
                String nombreComponente = comp.getName();
                if (nombreComponente == null) {
                    continue;
                }

                switch (nombreComponente) {
                    case "checkbox" ->
                        nombre = ((JCheckBox) comp).getText();
                    case "timePickerEntrada" ->
                        horaEntrada = ((TimePicker) comp).getTime();
                    case "timePickerSalida" ->
                        horaSalida = ((TimePicker) comp).getTime();
                    case "textPaneNotas" ->
                        notas = ((JTextPane) comp).getText();
                }
            }

            // Validar horas y lanzar excepción si es necesario
            coordinadorNegocio.validarHoras(horaEntrada, horaSalida, nombre);

            // Agregar la asistencia del personal a la lista
            listaAsistenciaPersonal.add(new AsistenciaPersonalDTO(nombre, horaEntrada, horaSalida, notas));
        }

        return listaAsistenciaPersonal;
    }

    /**
     * Gestiona la finalización del proceso completo de registro de bitácora.
     *
     * Registra la asistencia, solicita confirmación al usuario y, si es
     * aceptada, completa el registro de la bitácora y retorna a la pantalla de
     * obra seleccionada. También maneja los posibles errores durante el
     * proceso.
     */
    private void siguiente() {
        // Intentar registrar la bitacora
        try {
            coordinadorNegocio.registrarAsistencia(registrarAsistenciaPorPersonal());

            int opcion = JOptionPane.showConfirmDialog(this,
                    "¿Seguro que desea registrar la bitácora? No podrá editarse después.",
                    "Confirmar registro", JOptionPane.YES_NO_OPTION);
            if (opcion != JOptionPane.YES_OPTION) {
                return;
            }

            coordinadorNegocio.registrarBitacora();
            JOptionPane.showMessageDialog(this, "Bitácora registrada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Regresar a ventana ObraSeleccionada
            coordinadorNegocio.reset();
            this.dispose();
            coordinador.reset();
            coordinador.mostrarObraSeleccionada();
        } catch (PresentacionException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * Gestiona el retorno al formulario anterior en el flujo de trabajo. Cierra
     * este formulario y muestra el de herramientas y maquinaria.
     */
    private void atras() {
        this.dispose();
        coordinador.mostrarHerramientasYMaquinaria();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JTextField campoNombreObra;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel nombreEmpresa;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JLabel registrarAsistencia;
    private com.github.lgooddatepicker.components.TimePicker timePicker4;
    private com.github.lgooddatepicker.components.TimePicker timePicker5;
    private javax.swing.JTextField txtFiltroPersonal;
    // End of variables declaration//GEN-END:variables
}
