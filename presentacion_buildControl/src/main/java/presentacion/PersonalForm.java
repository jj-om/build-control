/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion;

import com.github.lgooddatepicker.components.TimePicker;
import dto.AsistenciaPersonalDTO;
import dto.ListaAsistenciaDTO;
import java.awt.BorderLayout;
import java.awt.Checkbox;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Panel;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;

/**
 *
 * @author alega
 */
public class PersonalForm extends JFrame {
    private JPanel panelContenedor;  // Panel donde se agregarán los trabajadores
    private JScrollPane scrollPanel; // Panel con barra de desplazamiento
    private List<String> trabajadores; // Lista de trabajadores
    
    private CoordinadorAplicacion coordinador;
    private CoordinadorNegocio coordinadorNegocio;

    /**
     * Creates new form AsistenciaForm
     * @param coordinador
     */
    public PersonalForm(CoordinadorAplicacion coordinador) {
        initComponents();
        getContentPane().setBackground(Color.WHITE);
        this.setLocationRelativeTo(null);
        this.coordinador = coordinador;
        this.coordinadorNegocio = CoordinadorNegocio.getInstance();
        
        // Inicializar lista de trabajadores
        trabajadores = Arrays.asList("Juan Pérez", "Ana Gómez", "Carlos López", "Marta Ruiz", "Pepe Lopez");
        
        crearPanelAsistencia();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        timePicker4 = new com.github.lgooddatepicker.components.TimePicker();
        timePicker5 = new com.github.lgooddatepicker.components.TimePicker();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        btnAtras = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        panelPrincipal = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        nombreEmpresa = new javax.swing.JLabel();
        registrarAsistencia = new javax.swing.JLabel();

        jLabel4.setText("Entrada");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Salida");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Notas");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAtras.setText("Atrás");
        btnAtras.setBackground(new java.awt.Color(95, 168, 211));
        btnAtras.setBorderPainted(false);
        btnAtras.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAtras.setForeground(new java.awt.Color(255, 255, 255));
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnSiguiente.setText("Registrar bitácora");
        btnSiguiente.setBackground(new java.awt.Color(95, 168, 211));
        btnSiguiente.setBorderPainted(false);
        btnSiguiente.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSiguiente.setForeground(new java.awt.Color(255, 255, 255));
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        panelPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        panelPrincipal.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        nombreEmpresa.setText("BuildControl");
        nombreEmpresa.setFont(new java.awt.Font("Segoe UI", 0, 32)); // NOI18N

        registrarAsistencia.setText("Registrar asistencia");
        registrarAsistencia.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrarAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreEmpresa))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nombreEmpresa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registrarAsistencia)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPrincipal.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSiguiente)
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        atras();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        siguiente();
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void crearPanelAsistencia() {
        // Crear el panel contenedor con BoxLayout (apilado vertical)
        panelContenedor = new JPanel();
        panelContenedor.setLayout(new BoxLayout(panelContenedor, BoxLayout.Y_AXIS));
        panelContenedor.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Margen
        panelContenedor.setPreferredSize(new Dimension(750, trabajadores.size() * 60)); // Tamaño para el scroll
        panelContenedor.setBackground(Color.WHITE);

        // Llenar el panel con los trabajadores
        agregarPanelesTrabajadores();

        // Agregar el panel a un JScrollPane
        scrollPanel = new JScrollPane(panelContenedor);
        scrollPanel.setBackground(Color.WHITE);
        scrollPanel.setBorder(null);
        scrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); // Solo mostrar cuando sea necesario
        scrollPanel.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); // Deshabilitar scroll horizontal
        scrollPanel.getVerticalScrollBar().setUnitIncrement(16); // Suavizar el scroll

        // Agregar el JScrollPane al JFrame
        setLayout(new BorderLayout());
        panelPrincipal.add(scrollPanel, BorderLayout.CENTER);

        setVisible(true);
    }
    
    private void agregarPanelesTrabajadores() {
        Font fuentePanelTrabajador = new Font("Segoe UI", Font.PLAIN, 14);
        
        for (String trabajador : trabajadores) {
            JPanel panelTrabajador = crearPanelEmpleado(trabajador);
            cambiarFuente(panelTrabajador, fuentePanelTrabajador);
            panelContenedor.add(panelTrabajador);
            panelContenedor.add(Box.createVerticalStrut(10)); // Espacio entre paneles
        }

        // Asegurar que la interfaz se actualice después de agregar componentes
        panelContenedor.revalidate();
        panelContenedor.repaint();
    }

    private JPanel crearPanelEmpleado(String trabajador) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 20, 20));  // Distribuye los elementos en línea horizontal
        panel.setBackground(Color.WHITE);
        panel.setPreferredSize(new Dimension(750, 30)); // Mantener tamaño uniforme

        // Crear los componentes
        JCheckBox checkbox = new JCheckBox(trabajador);
        checkbox.setBackground(Color.WHITE);
        TimePicker timePickerEntrada = new TimePicker();
        TimePicker timePickerSalida = new TimePicker();
        JTextPane textPaneNotas = new JTextPane();
        textPaneNotas.setPreferredSize(new Dimension(150, 25)); // Definir tamaño de notas
        textPaneNotas.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        
        JLabel lbEntrada = new JLabel("Entrada:");
        JLabel lbSalida = new JLabel ("Salida:");
        JLabel lbNotas = new JLabel ("Notas:");

        // Agregar los componentes en una línea horizontal
        panel.add(checkbox);
        panel.add(lbEntrada);
        panel.add(timePickerEntrada);
        panel.add(lbSalida);
        panel.add(timePickerSalida);
        panel.add(lbNotas);
        panel.add(textPaneNotas);

        // Ocultar los componentes al inicio (menos el checkbox)
        lbEntrada.setVisible(false);
        lbSalida.setVisible(false);
        lbNotas.setVisible(false);
        timePickerEntrada.setVisible(false);
        timePickerSalida.setVisible(false);
        textPaneNotas.setVisible(false);

        // Mostrar los campos solo cuando se selecciona el checkbox
        checkbox.addActionListener(e -> {
            boolean seleccionado = checkbox.isSelected();
            lbEntrada.setVisible(seleccionado);
            lbSalida.setVisible(seleccionado);
            lbNotas.setVisible(seleccionado);
            timePickerEntrada.setVisible(seleccionado);
            timePickerSalida.setVisible(seleccionado);
            textPaneNotas.setVisible(seleccionado);
            panel.revalidate();
            panel.repaint();
        });

        return panel;
    }

    private void cambiarFuente(JPanel panel, Font fuente) {
        for (Component componente : panel.getComponents()) {
            componente.setFont(fuente);
            if (componente instanceof JPanel) {
                cambiarFuente((JPanel) componente, fuente); // Aplicar recursivamente a subpaneles
            }
        }
    }

    private List<Component> buscarEmpleadosSeleccionados() {
        List<Component> panelesEmpleados = new ArrayList<>();

        for (Component comp : panelContenedor.getComponents()) {
            if (comp instanceof JPanel) {
                // Buscar JCheckBox seleccionados dentro del subpanel
                List<Component> checkboxSeleccionados = buscarCheckBoxSeleccionados((JPanel) comp);

                // Si el subpanel tiene al menos un JCheckBox seleccionado, lo agregamos
                if (!checkboxSeleccionados.isEmpty()) {
                    panelesEmpleados.add(comp);
                }
            }
        }
        return panelesEmpleados;
    }

    // Método auxiliar que busca JCheckBox seleccionados dentro de un panel
    private List<Component> buscarCheckBoxSeleccionados(Container container) {
        List<Component> checkboxes = new ArrayList<>();

        for (Component comp : container.getComponents()) {
            if (comp instanceof JCheckBox && ((JCheckBox) comp).isSelected()) {
                checkboxes.add(comp);
            } else if (comp instanceof JPanel) {
                // Buscar recursivamente en subpaneles
                checkboxes.addAll(buscarCheckBoxSeleccionados((JPanel) comp));
            }
        }
        return checkboxes;
    }

    private void registrarAsistenciaEmpleado() {
        List<Component> panelesEmpleadosSeleccionados = buscarEmpleadosSeleccionados();
   
        for (Component comp : panelesEmpleadosSeleccionados) {
            AsistenciaPersonalDTO asistenciaPersonal = new AsistenciaPersonalDTO();
            
            // Verifica que el componente tenga un nombre definido
            String nombreComponente = comp.getName();
            if (nombreComponente == null) {
                continue; // Si el componente no tiene nombre, lo ignoramos
            }

            switch (nombreComponente) {
                case "checkbox" -> {
                    Checkbox checkbox = (Checkbox) comp;
                    asistenciaPersonal.setNombre(checkbox.getLabel());
                }
                case "timePickerEntrada" -> {
                    TimePicker timePickerEntrada = (TimePicker) comp;
                    asistenciaPersonal.setHoraEntrada(timePickerEntrada.getTime());
                }
                case "timePickerSalida" -> {
                    TimePicker timePickerSalida = (TimePicker) comp;
                    asistenciaPersonal.setHoraSalida(timePickerSalida.getTime());
                }
                case "textPaneNotas" -> {
                    JTextPane textPaneNotas = (JTextPane) comp;
                    asistenciaPersonal.setNotas(textPaneNotas.getText());
                }

                default -> {
                    break; // Si el componente no es relevante, se ignora
                }
            }
            
            // Agregar la asistencia del personal a la lista
            coordinadorNegocio.registrarAsistencia(asistenciaPersonal);
        }
    }
    
    private void registrarAsistencia() {
        boolean asistenciaRegistrada = coordinadorNegocio.guardarListaAsistencia();
    }
    
    private void siguiente() {
        int opcion = JOptionPane.showConfirmDialog(this,
                "¿Seguro que desea registrar la bitácora? No podrá editarse después.",
                "Confirmar registro", JOptionPane.YES_NO_OPTION);
        if (opcion != JOptionPane.YES_OPTION) {
            return;
        }
        
        // Intentar registrar la bitacora
        try {
            registrarAsistencia();
            coordinadorNegocio.registrarBitacora();
            
            JOptionPane.showMessageDialog(this, "Bitácora registrada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            
            // Regresar a ventana ObraSeleccionada
            this.dispose();
            coordinador.mostrarObraSeleccionada();
        } catch (Exception e) { // Cambiar por excepcion personalizada
            JOptionPane.showMessageDialog(this, "No fue posible registrar la bitácora.", "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(e.getMessage());
        }   
    }

    private void atras() {
        this.dispose();
        coordinador.mostrarHerramientasYMaquinaria();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel nombreEmpresa;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JLabel registrarAsistencia;
    private com.github.lgooddatepicker.components.TimePicker timePicker4;
    private com.github.lgooddatepicker.components.TimePicker timePicker5;
    // End of variables declaration//GEN-END:variables
}
