/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion;

import utilities.Utilities;
import dto.MaterialIngresadoDTO;
import dto.ObraDTO;
import dto.RecursoDTO;
import excepciones.AdmMaterialesException;
import exception.PresentacionException;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 * Clase MaterialesForm
 *
 * Formulario de la capa de presentación para el registro de materiales en el
 * sistema.
 * 
 * @author Alejandra García 252444
 * @author Isabel Valenzuela 253301
 * @author Ximena Rosales 253088
 * @author Dario Cortez 252267
 * @author Jesús Osuna 240549
 */
public class MaterialesForm extends javax.swing.JFrame {
    
    /**
     * Referencia al coordinador de aplicación. Permite la navegación entre los
     * distintos formularios del sistema.
     */
    private CoordinadorAplicacion coordinador;

    /**
     * Referencia al coordinador de negocio. Proporciona acceso a la lógica de
     * negocio para el registro de materiales.
     */
    private CoordinadorNegocio coordinadorNegocio;

    /**
     * Modelo de tabla para los materiales seleccionados. Almacena los
     * materiales elegidos con sus cantidades.
     */
    private DefaultTableModel tableModel;

    /**
     * Ordenador de filas para la tabla de materiales. Proporciona capacidades
     * de filtrado para la tabla.
     */
    private TableRowSorter<DefaultTableModel> tableSorter;

    /**
     * Modelo de lista para la búsqueda de materiales. Gestiona la lista
     * desplegable con los materiales disponibles.
     */
    private DefaultListModel<String> listModel;

    /**
     * Lista de recursos disponibles para la obra seleccionada. Contiene los
     * materiales que pueden ser utilizados en la bitácora.
     */
    private List<RecursoDTO> recursos;

    /**
     * Lista con los nombres de todos los materiales disponibles. Facilita la
     * búsqueda por nombre en la interfaz.
     */
    private List<String> nombresMateriales;

    /**
     * Constructor del formulario de materiales.
     *
     * Inicializa los componentes gráficos, configura la tabla y lista de
     * materiales, y establece la conexión con los coordinadores de la
     * aplicación.
     *
     * @param coordinador Referencia al coordinador de aplicación
     */
    public MaterialesForm(CoordinadorAplicacion coordinador) {
        initComponents();
        getContentPane().setBackground(java.awt.Color.WHITE);
        this.setLocationRelativeTo(null);
        this.coordinador = coordinador;
        this.coordinadorNegocio = CoordinadorNegocio.getInstance();
        
        listModel = new DefaultListModel<>();
        listBuscador.setModel(listModel);

        tableModel = new DefaultTableModel(new Object[]{"Material", "-", "Cantidad", "+"}, 0);
        tblMateriales.setModel(tableModel);
        tblMateriales.setDefaultEditor(Object.class, null);
        tableSorter = new TableRowSorter<>(tableModel);
        tblMateriales.setRowSorter(tableSorter);
        tblMateriales.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer()); // Hace que las columnas se vean como botones
        tblMateriales.getColumnModel().getColumn(3).setCellRenderer(new ButtonRenderer());
        tblMateriales.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor(new JCheckBox(), false)); // Botón "-"
        tblMateriales.getColumnModel().getColumn(3).setCellEditor(new ButtonEditor(new JCheckBox(), true));  // Botón "+"
        ObraDTO obra = this.coordinadorNegocio.obtenerObraSeleccionada();
        campoNombreObra.setText(obra.getDireccion());
        
        
        cargarListas();
        buscadorListaMateriales();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        buttonGroup1 = new javax.swing.ButtonGroup();
        nombreEmpresa = new javax.swing.JLabel();
        registrarMaterial = new javax.swing.JLabel();
        btnAtras = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMateriales = new javax.swing.JTable();
        txtBuscadorLista = new javax.swing.JTextField();
        jScrollPaneBuscador = new javax.swing.JScrollPane();
        listBuscador = new javax.swing.JList<>();
        txtFiltroTabla = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        campoNombreObra = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList1);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        nombreEmpresa.setFont(new java.awt.Font("Segoe UI", 0, 32)); // NOI18N
        nombreEmpresa.setText("BuildControl");

        registrarMaterial.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrarMaterial.setText("Registrar material");

        btnAtras.setBackground(new java.awt.Color(95, 168, 211));
        btnAtras.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAtras.setForeground(new java.awt.Color(255, 255, 255));
        btnAtras.setText("Atrás");
        btnAtras.setBorderPainted(false);
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnSiguiente.setBackground(new java.awt.Color(95, 168, 211));
        btnSiguiente.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSiguiente.setForeground(new java.awt.Color(255, 255, 255));
        btnSiguiente.setText("Siguiente");
        btnSiguiente.setBorderPainted(false);
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Ingresa el nombre del material:");

        tblMateriales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Material", "-", "Cantidad", "+"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMateriales.setRowSelectionAllowed(false);
        tblMateriales.getTableHeader().setResizingAllowed(false);
        tblMateriales.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblMateriales);

        txtBuscadorLista.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBuscadorLista.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscadorListaKeyReleased(evt);
            }
        });

        jScrollPaneBuscador.setPreferredSize(new java.awt.Dimension(258, 82));

        listBuscador.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        listBuscador.setMinimumSize(new java.awt.Dimension(13, 20));
        listBuscador.setVisibleRowCount(5);
        listBuscador.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listBuscadorValueChanged(evt);
            }
        });
        jScrollPaneBuscador.setViewportView(listBuscador);

        txtFiltroTabla.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtFiltroTabla.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroTablaKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Filtrar por nombre de material:");

        campoNombreObra.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        campoNombreObra.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        campoNombreObra.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(registrarMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBuscadorLista)
                            .addComponent(jScrollPaneBuscador, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtFiltroTabla, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3))
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nombreEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(campoNombreObra, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreEmpresa)
                    .addComponent(campoNombreObra, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registrarMaterial)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFiltroTabla, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBuscadorLista, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 50, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Maneja el evento de clic en el botón "Atrás".
     * Regresa al formulario anterior del flujo de trabajo.
     * 
     * @param evt Evento de acción que desencadenó este método
     */
    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        atras();
    }//GEN-LAST:event_btnAtrasActionPerformed

    /**
     * Maneja el evento de clic en el botón "Siguiente". Valida y registra los
     * materiales seleccionados, y avanza al siguiente formulario.
     *
     * @param evt Evento de acción que desencadenó este método
     */
    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        try {
            siguiente();
        } catch (AdmMaterialesException ex) {
            Logger.getLogger(MaterialesForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSiguienteActionPerformed

    /**
     * Maneja el evento de liberación de tecla en el campo de búsqueda.
     * Actualiza la lista de materiales según el texto ingresado.
     *
     * @param evt Evento de teclado que desencadenó este método
     */
    private void txtBuscadorListaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscadorListaKeyReleased
        buscadorListaMateriales();
    }//GEN-LAST:event_txtBuscadorListaKeyReleased

    /**
     * Maneja el evento de cambio de selección en la lista de materiales. Agrega
     * el material seleccionado a la tabla.
     *
     * @param evt Evento de selección que desencadenó este método
     */
    private void listBuscadorValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listBuscadorValueChanged
        seleccionarMaterialLista(evt);
    }//GEN-LAST:event_listBuscadorValueChanged

    /**
     * Maneja el evento de liberación de tecla en el campo de filtro de tabla.
     * Filtra las filas de la tabla según el texto ingresado.
     *
     * @param evt Evento de teclado que desencadenó este método
     */
    private void txtFiltroTablaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroTablaKeyReleased
        filtrarTabla();
    }//GEN-LAST:event_txtFiltroTablaKeyReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    // Renderizador para el botón en la tabla (solo apariencia)
    /**
     * Clase interna que implementa un renderizador personalizado para los
     * botones en la tabla. Permite mostrar botones dentro de las celdas de
     * tabla para incrementar o decrementar cantidades.
     */
    class ButtonRenderer extends JButton implements TableCellRenderer {

        /**
         * Constructor del renderizador de botones. Configura las propiedades
         * básicas del componente.
         */
        public ButtonRenderer() {
            setOpaque(true); // Hacer el botón no transparente
        }

        /**
         * Implementación del método de la interfaz TableCellRenderer. Configura
         * y devuelve el componente que se mostrará en la celda.
         *
         * @return El botón configurado para mostrarse en la celda
         */
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value == null ? "" : value.toString());
            return this; // Devolver el botón para mostrarlo
        }
    }

    // Editor de botones para manejar incremento y decremento
    /**
     * Clase interna que implementa un editor personalizado para los botones en la tabla.
     * Gestiona la interacción con los botones de incremento/decremento de cantidades.
     */
    class ButtonEditor extends DefaultCellEditor {

        /**
         * Botón que se mostrará en la celda.
         */
        private JButton button;

        /**
         * Indica si el botón es para incrementar (true) o decrementar (false).
         */
        private boolean isIncrement;

        /**
         * Índice de la fila que contiene el botón.
         */
        private int row;

        /**
         * Constructor del editor de botones.
         *
         * @param checkBox Componente base para el editor (requerido por
         * DefaultCellEditor)
         * @param isIncrement Indica si el botón incrementa (true) o decrementa
         * (false)
         */
        public ButtonEditor(JCheckBox checkBox, boolean isIncrement) {
            super(checkBox);
            this.isIncrement = isIncrement;

            // Crear el botón con el texto adecuado
            this.button = new JButton(isIncrement ? "+" : "-");
            button.setOpaque(true);
            button.addActionListener(e -> manejarCantidad());
        }

        // Lógica común para incrementar o decrementar la cantidad
        /**
         * Método para gestionar el incremento o decremento de la cantidad.
         * Actualiza el valor en la tabla o elimina la fila si la cantidad llega
         * a cero.
         */
        private void manejarCantidad() {
            int cantidad = (int) tableModel.getValueAt(row, 2);  // Obtener la cantidad
            if (isIncrement) {
                tableModel.setValueAt(cantidad + 1, row, 2);
            } else {
                if (cantidad > 1) {
                    tableModel.setValueAt(cantidad - 1, row, 2);
                } else {
                    // Eliminar la fila si la cantidad es 0
                    tableModel.removeRow(row);
                    actualizarListaMateriales(txtBuscadorLista.getText().trim());
                }
            }
            fireEditingStopped();  // Detener la edición después de hacer clic
        }

        /**
         * Implementación del método para obtener el componente de edición.
         *
         * @return El botón configurado como componente de edición
         */
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.row = row;
            return button; // Mostrar el botón como componente de edición
        }

        /**
         * Implementación del método para obtener el valor de la celda.
         *
         * @return El símbolo correspondiente al tipo de botón
         */
        @Override
        public Object getCellEditorValue() {
            return isIncrement ? "+" : "-"; // Retornar el símbolo adecuado
        }
    }

    /**
     * Procesa la selección de un material en la lista.
     *
     * @param evt Evento de selección que contiene la información del material
     * seleccionado
     */
    private void seleccionarMaterialLista(ListSelectionEvent evt) {
        Utilities.seleccionarElementoLista(evt, listBuscador, tableModel, false);
    }
    
    /**
     * Actualiza la lista de materiales según el texto en el buscador. Utiliza
     * la clase utilitaria para gestionar el filtrado.
     */
    private void buscadorListaMateriales() {
        Utilities.buscadorLista(txtBuscadorLista, listModel, jScrollPaneBuscador, nombresMateriales, listBuscador);
    }

    // Filtrar y actualizar la lista de materiales
    /**
     * Actualiza la lista de materiales disponibles para la selección.
     *
     * @param textoBuscador Texto para filtrar la lista
     */
    private void actualizarListaMateriales(String textoBuscador) {
        Utilities.actualizarLista(listBuscador, listModel, nombresMateriales, textoBuscador, jScrollPaneBuscador);
    }
    
    /**
     * Aplica un filtro a la tabla de materiales. Muestra solo las filas que
     * coinciden con el texto ingresado.
     */
    private void filtrarTabla() {
        Utilities.filtrarTabla(jTable1, tableSorter, txtFiltroTabla);
    }
    
    /**
     * Recopila los materiales seleccionados en la tabla y crea los DTOs
     * correspondientes.
     *
     * @return Lista de MaterialIngresadoDTO con los materiales y sus cantidades
     */
    private List<MaterialIngresadoDTO> obtenerMaterialesIngresados() {
        List<MaterialIngresadoDTO> materialesIngresados = new ArrayList<>();

        // Recorremos todas las filas de la tabla
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            // Extraemos los datos de la tabla: nombre de material y cantidad ingresada
            String nombreMaterial = (String) tableModel.getValueAt(i, 0);
            Integer cantidadMaterial = (Integer) tableModel.getValueAt(i, 2);  

            // Buscar el material en la lista de materiales
            RecursoDTO recursoDTO = buscarRecursoDeMaterial(nombreMaterial);

            if (recursoDTO != null) {
                // Crear el MaterialIngresadoDTO
                MaterialIngresadoDTO materialIngresadoDTO = new MaterialIngresadoDTO(recursoDTO, cantidadMaterial);

                // Agregar a la lista
                materialesIngresados.add(materialIngresadoDTO);
            }
        }

        return materialesIngresados;
    }

    // Obtiene el material del recurso mediante su nombre
    /**
     * Busca un recurso en el catálogo por el nombre del material.
     * 
     * @param nombreMaterial Nombre del material a buscar
     * @return Objeto RecursoDTO correspondiente o null si no se encuentra
     */
    private RecursoDTO buscarRecursoDeMaterial(String nombreMaterial) {
        for (RecursoDTO recurso : recursos) {
            if (recurso.getMaterial().getNombre().equalsIgnoreCase(nombreMaterial)) {
                return recurso;
            }
        }
        return null;  // Si no se encuentra, retorna null
    }
    
    /**
     * Extrae los nombres de todos los materiales disponibles.
     *
     * @return Lista con los nombres de los materiales
     */
    private List<String> obtenerNombresMateriales() {
        List<String> nombres = new ArrayList<>();
        
        for (RecursoDTO recurso : recursos) {
            nombres.add(recurso.getMaterial().getNombre());
        }
        
        return nombres;
    }
    
    /**
     * Carga las listas de recursos y nombres de materiales desde el coordinador de negocio.
     */
    private void cargarListas() {
        this.recursos = coordinadorNegocio.obtenerMateriales();
        this.nombresMateriales = obtenerNombresMateriales();
    }

    // Confirmación y procesamiento de los datos para continuar
    /**
     * Gestiona la transición al siguiente formulario en el flujo de trabajo.
     *
     * Verifica que se hayan seleccionado materiales, los registra formalmente
     * en el sistema y avanza al formulario de herramientas y maquinaria.
     *
     * @throws AdmMaterialesException Si ocurre un error en el subsistema de
     * materiales
     */
    private void siguiente() throws AdmMaterialesException {
        if (tblMateriales.getRowCount() == 0) {
            int opcion = JOptionPane.showConfirmDialog(this,
                    "No se han ingresado materiales, ¿Seguro que desea continuar?",
                    "Confirmar salida", JOptionPane.YES_NO_OPTION);
            if (opcion != JOptionPane.YES_OPTION) {
                return;
            }
        } else {
            try {
                List<MaterialIngresadoDTO> materialesIngresados = obtenerMaterialesIngresados();
                coordinadorNegocio.registrarMateriales(materialesIngresados);
            } catch (PresentacionException | AdmMaterialesException e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                this.dispose();
                coordinadorNegocio.reset();
                coordinador.mostrarObraSeleccionada();
                coordinador.reset();
                return;
            }
        }
        this.dispose();
        coordinador.mostrarHerramientasYMaquinaria();
    }
    
    /**
     * Gestiona el retorno al formulario anterior en el flujo de trabajo. Cierra
     * este formulario y muestra el de actividades.
     */
    private void atras() {
        this.dispose();
        coordinador.mostrarActividades();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField campoNombreObra;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPaneBuscador;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JList<String> listBuscador;
    private javax.swing.JLabel nombreEmpresa;
    private javax.swing.JLabel registrarMaterial;
    private javax.swing.JTable tblMateriales;
    private javax.swing.JTextField txtBuscadorLista;
    private javax.swing.JTextField txtFiltroTabla;
    // End of variables declaration//GEN-END:variables
}